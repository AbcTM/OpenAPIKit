#if !canImport(ObjectiveC)
import XCTest

extension AnyJSONCaseIterableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AnyJSONCaseIterableTests = [
        ("test_CodableToAllCases", test_CodableToAllCases),
        ("testAnyCodableToAllCases", testAnyCodableToAllCases),
    ]
}

extension ContentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContentTests = [
        ("test_contentMap", test_contentMap),
        ("test_decodeFailureForBothExampleAndExamples", test_decodeFailureForBothExampleAndExamples),
        ("test_encoding_allowReserved_decode", test_encoding_allowReserved_decode),
        ("test_encoding_allowReserved_encode", test_encoding_allowReserved_encode),
        ("test_encoding_contentType_decode", test_encoding_contentType_decode),
        ("test_encoding_contentType_encode", test_encoding_contentType_encode),
        ("test_encoding_explode_decode", test_encoding_explode_decode),
        ("test_encoding_explode_encode", test_encoding_explode_encode),
        ("test_encoding_headers_decode", test_encoding_headers_decode),
        ("test_encoding_headers_encode", test_encoding_headers_encode),
        ("test_encoding_minimal_decode", test_encoding_minimal_decode),
        ("test_encoding_minimal_encode", test_encoding_minimal_encode),
        ("test_encoding_style_decode", test_encoding_style_decode),
        ("test_encoding_style_encode", test_encoding_style_encode),
        ("test_encodingAndSchema_decode", test_encodingAndSchema_decode),
        ("test_encodingAndSchema_encode", test_encodingAndSchema_encode),
        ("test_encodingInit", test_encodingInit),
        ("test_exampleAndSchemaContent_decode", test_exampleAndSchemaContent_decode),
        ("test_exampleAndSchemaContent_encode", test_exampleAndSchemaContent_encode),
        ("test_examplesAndSchemaContent_decode", test_examplesAndSchemaContent_decode),
        ("test_examplesAndSchemaContent_encode", test_examplesAndSchemaContent_encode),
        ("test_init", test_init),
        ("test_nonStringKeyNonesenseDecodeFailure", test_nonStringKeyNonesenseDecodeFailure),
        ("test_referenceContent_decode", test_referenceContent_decode),
        ("test_referenceContent_encode", test_referenceContent_encode),
        ("test_schemaContent_decode", test_schemaContent_decode),
        ("test_schemaContent_encode", test_schemaContent_encode),
        ("test_vendorExtensions_decode", test_vendorExtensions_decode),
        ("test_vendorExtensions_encode", test_vendorExtensions_encode),
        ("test_vendorExtensions_encode_fixKey", test_vendorExtensions_encode_fixKey),
    ]
}

extension DeclarativeEaseOfUseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeclarativeEaseOfUseTests = [
        ("test_declarePiecemeal", test_declarePiecemeal),
        ("test_JSONSchema", test_JSONSchema),
        ("test_securityRequirements", test_securityRequirements),
        ("test_wholeBoi", test_wholeBoi),
    ]
}

extension DiscriminatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DiscriminatorTests = [
        ("test_init", test_init),
        ("test_noMapping_decode", test_noMapping_decode),
        ("test_noMapping_encode", test_noMapping_encode),
        ("test_withMapping_decode", test_withMapping_decode),
        ("test_withMapping_encode", test_withMapping_encode),
    ]
}

extension DocumentInfoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DocumentInfoTests = [
        ("test_contact_email_decode", test_contact_email_decode),
        ("test_contact_email_encode", test_contact_email_encode),
        ("test_contact_name_decode", test_contact_name_decode),
        ("test_contact_name_encode", test_contact_name_encode),
        ("test_contact_url_decode", test_contact_url_decode),
        ("test_contact_url_encode", test_contact_url_encode),
        ("test_info_minimal_decode", test_info_minimal_decode),
        ("test_info_minimal_encode", test_info_minimal_encode),
        ("test_info_withContact_decode", test_info_withContact_decode),
        ("test_info_withContact_encode", test_info_withContact_encode),
        ("test_info_withDescription_decode", test_info_withDescription_decode),
        ("test_info_withDescription_encode", test_info_withDescription_encode),
        ("test_info_withLicense_decode", test_info_withLicense_decode),
        ("test_info_withLicense_encode", test_info_withLicense_encode),
        ("test_info_withTOS_decode", test_info_withTOS_decode),
        ("test_info_withTOS_encode", test_info_withTOS_encode),
        ("test_init", test_init),
        ("test_initLicense", test_initLicense),
        ("test_license_decode", test_license_decode),
        ("test_license_encode", test_license_encode),
        ("test_license_withUrl_decode", test_license_withUrl_decode),
        ("test_license_withUrl_encode", test_license_withUrl_encode),
    ]
}

extension DocumentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DocumentTests = [
        ("test_existingSecuritySchemeSuccess", test_existingSecuritySchemeSuccess),
        ("test_init", test_init),
        ("test_minimal_decode", test_minimal_decode),
        ("test_minimal_encode", test_minimal_encode),
        ("test_missingSecuritySchemeError", test_missingSecuritySchemeError),
    ]
}

extension ExampleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExampleTests = [
        ("test_descriptionAndInternalExample_decode", test_descriptionAndInternalExample_decode),
        ("test_descriptionAndInternalExample_encode", test_descriptionAndInternalExample_encode),
        ("test_externalExample_decode", test_externalExample_decode),
        ("test_externalExample_encode", test_externalExample_encode),
        ("test_failedDecodeForInternalAndExternalExamples", test_failedDecodeForInternalAndExternalExamples),
        ("test_init", test_init),
        ("test_internalExample_decode", test_internalExample_decode),
        ("test_internalExample_encode", test_internalExample_encode),
        ("test_summaryAndExternalExample_decode", test_summaryAndExternalExample_decode),
        ("test_summaryAndExternalExample_encode", test_summaryAndExternalExample_encode),
        ("test_vendorExtensionAndInternalExample_decode", test_vendorExtensionAndInternalExample_decode),
        ("test_vendorExtensionAndInternalExample_encode", test_vendorExtensionAndInternalExample_encode),
    ]
}

extension ExternalDocTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExternalDocTests = [
        ("test_descriptionAndUrl_decode", test_descriptionAndUrl_decode),
        ("test_descriptionAndUrl_encode", test_descriptionAndUrl_encode),
        ("test_init", test_init),
        ("test_onlyUrl_decode", test_onlyUrl_decode),
        ("test_onlyUrl_encode", test_onlyUrl_encode),
    ]
}

extension GenericOpenAPISchemaInternalTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GenericOpenAPISchemaInternalTests = [
        ("test_openAPINodeGuessForType", test_openAPINodeGuessForType),
        ("test_openAPINodeGuessForValue", test_openAPINodeGuessForValue),
        ("test_reencodedSchemaGuess", test_reencodedSchemaGuess),
    ]
}

extension GenericOpenAPISchemaTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GenericOpenAPISchemaTests = [
        ("test_allowedValues", test_allowedValues),
        ("test_basicTypes", test_basicTypes),
        ("test_dateType", test_dateType),
        ("test_dateTypeFormats", test_dateTypeFormats),
        ("test_emptyObject", test_emptyObject),
        ("test_enumDirectly", test_enumDirectly),
        ("test_enumTypes", test_enumTypes),
        ("test_nested", test_nested),
        ("test_sampleableInSampleable", test_sampleableInSampleable),
    ]
}

extension HeaderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HeaderTests = [
        ("test_header_contentMap_decode", test_header_contentMap_decode),
        ("test_header_contentMap_encode", test_header_contentMap_encode),
        ("test_header_deprecated_decode", test_header_deprecated_decode),
        ("test_header_deprecated_encode", test_header_deprecated_encode),
        ("test_header_errorForBothContentAndSchema_decode", test_header_errorForBothContentAndSchema_decode),
        ("test_header_required_decode", test_header_required_decode),
        ("test_header_required_encode", test_header_required_encode),
        ("test_header_schema_decode", test_header_schema_decode),
        ("test_header_schema_encode", test_header_schema_encode),
        ("test_header_withDescription_decode", test_header_withDescription_decode),
        ("test_header_withDescription_encode", test_header_withDescription_encode),
        ("test_init", test_init),
    ]
}

extension JSONReferenceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__JSONReferenceTests = [
        ("test_descriptions", test_descriptions),
        ("test_initialization", test_initialization),
    ]
}

extension OperationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OperationTests = [
        ("test_init", test_init),
    ]
}

extension ParameterLocationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParameterLocationTests = [
        ("test_cookie", test_cookie),
        ("test_header", test_header),
        ("test_path", test_path),
        ("test_query", test_query),
    ]
}

extension RequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RequestTests = [
        ("test_form_onlySchemaContent_decode", test_form_onlySchemaContent_decode),
        ("test_form_onlySchemaContent_encode", test_form_onlySchemaContent_encode),
        ("test_init", test_init),
        ("test_onlyEmptyContent_decode", test_onlyEmptyContent_decode),
        ("test_onlyEmptyContent_encode", test_onlyEmptyContent_encode),
        ("test_onlyReferenceContent_decode", test_onlyReferenceContent_decode),
        ("test_onlyReferenceContent_encode", test_onlyReferenceContent_encode),
        ("test_onlySchemaContent_decode", test_onlySchemaContent_decode),
        ("test_onlySchemaContent_encode", test_onlySchemaContent_encode),
        ("test_withDescription_decode", test_withDescription_decode),
        ("test_withDescription_encode", test_withDescription_encode),
        ("test_withRequired_decode", test_withRequired_decode),
        ("test_withRequired_encode", test_withRequired_encode),
        ("test_xml_onlySchemaContent_decode", test_xml_onlySchemaContent_decode),
        ("test_xml_onlySchemaContent_encode", test_xml_onlySchemaContent_encode),
    ]
}

extension ResponseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResponseTests = [
        ("test_codeFromIntegerLiteral", test_codeFromIntegerLiteral),
        ("test_codeFromString", test_codeFromString),
        ("test_defaultFromString", test_defaultFromString),
        ("test_defaultStatusCode_decode", test_defaultStatusCode_decode),
        ("test_defaultStatusCode_encode", test_defaultStatusCode_encode),
        ("test_emptyDescriptionEmptyContent_decode", test_emptyDescriptionEmptyContent_decode),
        ("test_emptyDescriptionEmptyContent_encode", test_emptyDescriptionEmptyContent_encode),
        ("test_Initialization", test_Initialization),
        ("test_NilForNonIntegerString", test_NilForNonIntegerString),
        ("test_nonesenseStatusCode_decode_throws", test_nonesenseStatusCode_decode_throws),
        ("test_numberStatusCode_decode", test_numberStatusCode_decode),
        ("test_numberStatusCode_encode", test_numberStatusCode_encode),
        ("test_populatedDescriptionPopulatedContent_decode", test_populatedDescriptionPopulatedContent_decode),
        ("test_populatedDescriptionPopulatedContent_encode", test_populatedDescriptionPopulatedContent_encode),
        ("test_responseMap", test_responseMap),
    ]
}

extension ResultValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResultValueTests = [
        ("test_errorAccess", test_errorAccess),
        ("test_valueAccess", test_valueAccess),
    ]
}

extension SchemaObjectInternalTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SchemaObjectInternalTests = [
        ("test_fragmentValue", test_fragmentValue),
        ("test_nonFragmentIsNil", test_nonFragmentIsNil),
    ]
}

extension SchemaObjectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SchemaObjectTests = [
        ("test_allOf", test_allOf),
        ("test_anyOf", test_anyOf),
        ("test_boolean", test_boolean),
        ("test_decode32bitInteger", test_decode32bitInteger),
        ("test_decode64bitInteger", test_decode64bitInteger),
        ("test_decodeAll", test_decodeAll),
        ("test_decodeAny", test_decodeAny),
        ("test_decodeArray", test_decodeArray),
        ("test_decodeArrayWithAdditionalItemsDefinition", test_decodeArrayWithAdditionalItemsDefinition),
        ("test_decodeArrayWithItemsDefinition", test_decodeArrayWithItemsDefinition),
        ("test_decodeArrayWithMaxItems", test_decodeArrayWithMaxItems),
        ("test_decodeArrayWithMinItems", test_decodeArrayWithMinItems),
        ("test_decodeArrayWithUniqueItems", test_decodeArrayWithUniqueItems),
        ("test_decodeBinaryString", test_decodeBinaryString),
        ("test_decodeBoolean", test_decodeBoolean),
        ("test_decodeByteString", test_decodeByteString),
        ("test_decodeDateString", test_decodeDateString),
        ("test_decodeDateTimeString", test_decodeDateTimeString),
        ("test_decodeDoubleNumber", test_decodeDoubleNumber),
        ("test_decodeFileReference", test_decodeFileReference),
        ("test_decodeFloatNumber", test_decodeFloatNumber),
        ("test_decodeingFailsForTypo", test_decodeingFailsForTypo),
        ("test_decodeInteger", test_decodeInteger),
        ("test_decodeIntegerWithExclusiveMaximum", test_decodeIntegerWithExclusiveMaximum),
        ("test_decodeIntegerWithExclusiveMinimum", test_decodeIntegerWithExclusiveMinimum),
        ("test_decodeIntegerWithMaximum", test_decodeIntegerWithMaximum),
        ("test_decodeIntegerWithMinimum", test_decodeIntegerWithMinimum),
        ("test_decodeIntegerWithMultipleOf", test_decodeIntegerWithMultipleOf),
        ("test_decodeNodeReference", test_decodeNodeReference),
        ("test_decodeNot", test_decodeNot),
        ("test_decodeNumber", test_decodeNumber),
        ("test_decodeNumberWithExclusiveMaximum", test_decodeNumberWithExclusiveMaximum),
        ("test_decodeNumberWithExclusiveMinimum", test_decodeNumberWithExclusiveMinimum),
        ("test_decodeNumberWithMaximum", test_decodeNumberWithMaximum),
        ("test_decodeNumberWithMinimum", test_decodeNumberWithMinimum),
        ("test_decodeNumberWithMultipleOf", test_decodeNumberWithMultipleOf),
        ("test_decodeObject", test_decodeObject),
        ("test_decodeObjectWithAdditionalPropertiesBoolean", test_decodeObjectWithAdditionalPropertiesBoolean),
        ("test_decodeObjectWithAdditionalPropertiesObject", test_decodeObjectWithAdditionalPropertiesObject),
        ("test_decodeObjectWithDescription", test_decodeObjectWithDescription),
        ("test_decodeObjectWithExample", test_decodeObjectWithExample),
        ("test_decodeObjectWithExternalDocs", test_decodeObjectWithExternalDocs),
        ("test_decodeObjectWithMaxProperties", test_decodeObjectWithMaxProperties),
        ("test_decodeObjectWithMinProperties", test_decodeObjectWithMinProperties),
        ("test_decodeObjectWithRequiredProperties", test_decodeObjectWithRequiredProperties),
        ("test_decodeObjectWithTitle", test_decodeObjectWithTitle),
        ("test_decodeOne", test_decodeOne),
        ("test_decodePasswordString", test_decodePasswordString),
        ("test_decodeString", test_decodeString),
        ("test_decodeStringWithMaxLength", test_decodeStringWithMaxLength),
        ("test_decodeStringWithMinLength", test_decodeStringWithMinLength),
        ("test_decodeStringWithPattern", test_decodeStringWithPattern),
        ("test_description", test_description),
        ("test_encode32bitInteger", test_encode32bitInteger),
        ("test_encode64bitInteger", test_encode64bitInteger),
        ("test_encodeAll", test_encodeAll),
        ("test_encodeAny", test_encodeAny),
        ("test_encodeArray", test_encodeArray),
        ("test_encodeArrayWithAdditionalItemsDefinition", test_encodeArrayWithAdditionalItemsDefinition),
        ("test_encodeArrayWithItemsDefinition", test_encodeArrayWithItemsDefinition),
        ("test_encodeArrayWithMaxItems", test_encodeArrayWithMaxItems),
        ("test_encodeArrayWithMinItems", test_encodeArrayWithMinItems),
        ("test_encodeArrayWithUniqueItems", test_encodeArrayWithUniqueItems),
        ("test_encodeBinaryString", test_encodeBinaryString),
        ("test_encodeBoolean", test_encodeBoolean),
        ("test_encodeByteString", test_encodeByteString),
        ("test_encodeDateString", test_encodeDateString),
        ("test_encodeDateTimeString", test_encodeDateTimeString),
        ("test_encodeDoubleNumber", test_encodeDoubleNumber),
        ("test_encodeFileReference", test_encodeFileReference),
        ("test_encodeFloatNumber", test_encodeFloatNumber),
        ("test_encodeInteger", test_encodeInteger),
        ("test_encodeIntegerWithExclusiveMaximum", test_encodeIntegerWithExclusiveMaximum),
        ("test_encodeIntegerWithExclusiveMinimum", test_encodeIntegerWithExclusiveMinimum),
        ("test_encodeIntegerWithMaximum", test_encodeIntegerWithMaximum),
        ("test_encodeIntegerWithMinimum", test_encodeIntegerWithMinimum),
        ("test_encodeIntegerWithMultipleOf", test_encodeIntegerWithMultipleOf),
        ("test_encodeNodeReference", test_encodeNodeReference),
        ("test_encodeNot", test_encodeNot),
        ("test_encodeNumber", test_encodeNumber),
        ("test_encodeNumberWithExclusivceMinimum", test_encodeNumberWithExclusivceMinimum),
        ("test_encodeNumberWithExclusiveMaximum", test_encodeNumberWithExclusiveMaximum),
        ("test_encodeNumberWithMaximum", test_encodeNumberWithMaximum),
        ("test_encodeNumberWithMinimum", test_encodeNumberWithMinimum),
        ("test_encodeNumberWithMultipleOf", test_encodeNumberWithMultipleOf),
        ("test_encodeObject", test_encodeObject),
        ("test_encodeObjectWithAdditionalPropertiesBoolean", test_encodeObjectWithAdditionalPropertiesBoolean),
        ("test_encodeObjectWithAdditionalPropertiesObject", test_encodeObjectWithAdditionalPropertiesObject),
        ("test_encodeObjectWithDescription", test_encodeObjectWithDescription),
        ("test_encodeObjectWithExample", test_encodeObjectWithExample),
        ("test_encodeObjectWithExternalDocs", test_encodeObjectWithExternalDocs),
        ("test_encodeObjectWithMaxProperties", test_encodeObjectWithMaxProperties),
        ("test_encodeObjectWithMinProperties", test_encodeObjectWithMinProperties),
        ("test_encodeObjectWithNoPropertiesAndAdditionalPropertiesObject", test_encodeObjectWithNoPropertiesAndAdditionalPropertiesObject),
        ("test_encodeObjectWithRequiredProperties", test_encodeObjectWithRequiredProperties),
        ("test_encodeObjectWithTitle", test_encodeObjectWithTitle),
        ("test_encodeOne", test_encodeOne),
        ("test_encodePasswordString", test_encodePasswordString),
        ("test_encodeString", test_encodeString),
        ("test_encodeStringWithMaxLength", test_encodeStringWithMaxLength),
        ("test_encodeStringWithMinLength", test_encodeStringWithMinLength),
        ("test_encodeStringWithPattern", test_encodeStringWithPattern),
        ("test_externalDocs", test_externalDocs),
        ("test_integer", test_integer),
        ("test_jsonTypeFormat", test_jsonTypeFormat),
        ("test_minObjectProperties", test_minObjectProperties),
        ("test_notNullable", test_notNullable),
        ("test_notNullableToNullable", test_notNullableToNullable),
        ("test_nullable", test_nullable),
        ("test_number", test_number),
        ("test_object", test_object),
        ("test_oneOf", test_oneOf),
        ("test_optional", test_optional),
        ("test_optionalToRequired", test_optionalToRequired),
        ("test_required", test_required),
        ("test_requiredToOptional", test_requiredToOptional),
        ("test_string", test_string),
        ("test_title", test_title),
        ("test_withAddedAllowedValues", test_withAddedAllowedValues),
        ("test_withAddedExample", test_withAddedExample),
        ("test_withInitalAllowedValues", test_withInitalAllowedValues),
        ("test_withInitialExample", test_withInitialExample),
    ]
}

extension ServerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ServerTests = [
        ("test_maximalServer_decode", test_maximalServer_decode),
        ("test_maximalServer_encode", test_maximalServer_encode),
        ("test_minimalServer_decode", test_minimalServer_decode),
        ("test_minimalServer_encode", test_minimalServer_encode),
        ("test_serverInitialization", test_serverInitialization),
        ("test_serverVariableInitialization", test_serverVariableInitialization),
    ]
}

extension SwiftPrimitiveTypesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftPrimitiveTypesTests = [
        ("test_ArrayNode", test_ArrayNode),
        ("test_BoolNode", test_BoolNode),
        ("test_DoubleNode", test_DoubleNode),
        ("test_DoubleWrappedRawNodeType", test_DoubleWrappedRawNodeType),
        ("test_FloatNode", test_FloatNode),
        ("test_Int32Node", test_Int32Node),
        ("test_Int64Node", test_Int64Node),
        ("test_IntNode", test_IntNode),
        ("test_OptionalCaseIterableNodeAllCases", test_OptionalCaseIterableNodeAllCases),
        ("test_OptionalDateNodeType", test_OptionalDateNodeType),
        ("test_OptionalNodeType", test_OptionalNodeType),
        ("test_OptionalRawNodeType", test_OptionalRawNodeType),
        ("test_OptionalRawRepresentable", test_OptionalRawRepresentable),
        ("test_RawNodeType", test_RawNodeType),
        ("test_StringNode", test_StringNode),
    ]
}

extension TagTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TagTests = [
        ("test_allFields_decode", test_allFields_decode),
        ("test_allFields_encode", test_allFields_encode),
        ("test_init", test_init),
        ("test_nameAndDescription_decode", test_nameAndDescription_decode),
        ("test_nameAndDescription_encode", test_nameAndDescription_encode),
        ("test_onlyName_decode", test_onlyName_decode),
        ("test_onlyName_encode", test_onlyName_encode),
    ]
}

extension VendorExtendableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VendorExtendableTests = [
        ("test_arrayDecodeFailure", test_arrayDecodeFailure),
        ("test_decode", test_decode),
        ("test_encode", test_encode),
        ("test_encodeSuccess", test_encodeSuccess),
        ("test_nonXPrefixDecodeFailure", test_nonXPrefixDecodeFailure),
    ]
}

extension XMLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__XMLTests = [
        ("test_complete_decode", test_complete_decode),
        ("test_complete_encode", test_complete_encode),
        ("test_empty_decode", test_empty_decode),
        ("test_empty_encode", test_empty_encode),
        ("test_init", test_init),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AnyJSONCaseIterableTests.__allTests__AnyJSONCaseIterableTests),
        testCase(ContentTests.__allTests__ContentTests),
        testCase(DeclarativeEaseOfUseTests.__allTests__DeclarativeEaseOfUseTests),
        testCase(DiscriminatorTests.__allTests__DiscriminatorTests),
        testCase(DocumentInfoTests.__allTests__DocumentInfoTests),
        testCase(DocumentTests.__allTests__DocumentTests),
        testCase(ExampleTests.__allTests__ExampleTests),
        testCase(ExternalDocTests.__allTests__ExternalDocTests),
        testCase(GenericOpenAPISchemaInternalTests.__allTests__GenericOpenAPISchemaInternalTests),
        testCase(GenericOpenAPISchemaTests.__allTests__GenericOpenAPISchemaTests),
        testCase(HeaderTests.__allTests__HeaderTests),
        testCase(JSONReferenceTests.__allTests__JSONReferenceTests),
        testCase(OperationTests.__allTests__OperationTests),
        testCase(ParameterLocationTests.__allTests__ParameterLocationTests),
        testCase(RequestTests.__allTests__RequestTests),
        testCase(ResponseTests.__allTests__ResponseTests),
        testCase(ResultValueTests.__allTests__ResultValueTests),
        testCase(SchemaObjectInternalTests.__allTests__SchemaObjectInternalTests),
        testCase(SchemaObjectTests.__allTests__SchemaObjectTests),
        testCase(ServerTests.__allTests__ServerTests),
        testCase(SwiftPrimitiveTypesTests.__allTests__SwiftPrimitiveTypesTests),
        testCase(TagTests.__allTests__TagTests),
        testCase(VendorExtendableTests.__allTests__VendorExtendableTests),
        testCase(XMLTests.__allTests__XMLTests),
    ]
}
#endif
